{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport interface Printer {\n    /**\n     * Printer model name and model number\n     */\n    modelName?: string;\n    /**\n     * Printer Mac Address\n     */\n    macAddress?: string;\n    /**\n     * Printer port name used to create a new port instance of SMPort or StarIOExtManager\n     */\n    portName?: string;\n    /**\n     * USB Serial Number (USB Printers Only)\n     */\n    USBSerialNumber?: string;\n}\n/**\n * Array of Printer objects returned by the portDiscovery() function\n */\nexport interface Printers extends Array<Printer> {\n}\nexport interface PrinterStatus {\n    /**\n     * Printer Online/Offline status\n     */\n    offline?: boolean;\n    /**\n     *  Printer model name and model number\n     */\n    ModelName?: string;\n    /**\n     * Printer cover status\n     */\n    coverOpen?: boolean;\n    /**\n     * Printer Paper Cutter status\n     */\n    cutterError?: boolean;\n    /**\n     * Printer Paper status\n     */\n    receiptPaperEmpty?: boolean;\n    /**\n     * Printer Firmware information\n     */\n    FirmwareVersion?: string;\n}\nexport interface PrintObj {\n    /**\n     * string containing the text to print, Example: \"Star Clothing Boutique\\n123 Star Road\\nCity, State 12345\\n\\n\"\n     */\n    text: string;\n    /**\n     *  Sends a PartialCutWithFeed command to the printer, defaults to true\n     */\n    cutReceipt?: boolean;\n    /**\n     * sends a appendPeripheral command to the printer for channels No1 and No2 - Defaults to true\n     */\n    openCashDrawer?: boolean;\n}\nexport interface RasterObj extends PrintObj {\n    /**\n     * Font size number, defaults to 25\n     */\n    fontSize?: number;\n    /**\n     * Paper width (Units: Dots). 2 inches: 384, 3 inches: 576, 4 inches: 832, ESCPos 3 inches: 512, Dot 3 inches: 210. Defaults to 576\n     */\n    paperWidth?: number;\n}\nexport interface ImageObj {\n    /**\n     * Image URI to print, this can be obtained via the camera or photo library or as a static resource saved on the phone memory\n     */\n    uri: string;\n    /**\n     * Image width (Units: Dots) defaults to 576\n     */\n    paperWidth?: number;\n    /**\n     *  Sends a PartialCutWithFeed command to the printer, defaults to true\n     */\n    cutReceipt?: boolean;\n    /**\n     * sends a appendPeripheral command to the printer for channels No1 and No2 - Defaults to true\n     */\n    openCashDrawer?: boolean;\n}\nexport interface PrintCommand {\n    /**\n     * Characther encoding is used to getByte data from all subsequent commands. Default 'US-ASCII'\n     * Choose the format of the return value Defined in StarPRNT.Encoding or the Encoding enum.\n     * Example: {appendEncoding:'US-ASCII'}\n     */\n    appendEncoding?: string;\n    /**\n     * Select command of the code page is generated and added to the commands property.\n     * Choose the format of the return value Defined in StarPRNT.CodePageType or the CodePageType enum.\n     * Example: {appendCodePage:'CP858'}\n     */\n    appendCodePage?: string;\n    /**\n     * Data (Text) is added to the command buffer. Example: {append:\"Star Clothing Boutique\\n123 Star Road\\nCity, State 12345\\n\\n\"}\n     */\n    append?: string;\n    /**\n     * Data (Text) is added to the command buffer. Example: {appendRaw:\"Star Clothing Boutique\\n123 Star Road\\nCity, State 12345\\n\\n\"}\n     */\n    appendRaw?: string;\n    /**\n     * Data (Command) is added to the command buffer. Takes an array of bytes.\n     * Example: {appendBytes:[0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x2e]}\n     */\n    appendBytes?: number[];\n    /**\n     * Data (Command) is added to the command buffer. Takes an array of bytes.\n     * Example: {appendRawBytes:[0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x2e]}\n     */\n    appendRawBytes?: number[];\n    /**\n     * Set command of the character space is generated and added to the command buffer. Character Spacs (Unit: Dots) Example: 4\n     */\n    appendCharacterSpace?: number;\n    /**\n     *  Select command of the emphasis mode is generated and added to the command buffer. Example: {appendEmphasis:\"SALE\\n\"}\n     */\n    appendEmphasis?: string;\n    /**\n     *  Enable emphasis mode is generated and added to the command buffer. Example: {enableEmphasis:true}\n     */\n    enableEmphasis?: boolean;\n    /**\n     *  Select command of the invert mode is generated and added to the command buffer. Example: {appendInvert:\"Refunds and Exchanges\\n\"}\n     */\n    appendInvert?: string;\n    /**\n     *  Enable invert mode is generated and added to the command buffer. Example: {enableInvert:true}\n     */\n    enableInvert?: boolean;\n    /**\n     *  Select command of the under line mode is generated and added to the command buffer. Example: {appendUnderline:\"30 days\"}\n     */\n    appendUnderline?: string;\n    /**\n     *  Enable under line mode is generated and added to the command buffer. Example: {enableUnderline:true}\n     */\n    enableUnderline?: boolean;\n    /**\n     * Select command of the international character mode is generated and added to the command buffer.\n     * Choose the format of the return value Defined in StarPRNT.InternationalType or the InternationalType enum.\n     * 'UK' | 'USA' | 'France' | 'Germany' | 'Denmark' | 'Sweden' | 'Italy' | 'Spain' | 'Japan' | 'Norway' | 'Denmark2' | 'Spain2' | 'LatinAmerica' | 'Korea' | 'Ireland' | 'Legal'\n     * Example {appendInternational:InternationalType.UK}\n     */\n    appendInternational?: string;\n    /**\n     * Line feed command is generated and added to the command buffer. Paper feed units (Units: Lines) Example: 2\n     */\n    appendLineFeed?: number;\n    /**\n     * Unit feed command is generated and added to the command buffer. Paper feed units (Units: Dots) Example: 64\n     */\n    appendUnitFeed?: number;\n    /**\n     * Set command of the line space is generated and added to the command buffer. Line spaces (Units: Dots) Example: 32\n     */\n    appendLineSpace?: number;\n    /**\n     * Select command of the font style is generated and added to the command buffer.\n     * Choose the format of the return value defined in StarPRNT.FontStyleType or the FontStyleType enum. 'A' | 'B'\n     * Example: {appendFontStyle:FontStyleType.A}\n     */\n    appendFontStyle?: string;\n    /**\n     * Paper cut command is generated and added to the command buffer.\n     * Choose the format of the return value defined in StarPRNT.CutPaperAction or the CutPaperAction enum. 'FullCut' | 'FullCutWithFeed' | 'PartialCut' | 'PartialCutWithFeed'\n     * Example: {appendCutPaper:CutPaperAction.PartialCutWithFeed}\n     */\n    appendCutPaper?: string;\n    /**\n     * Black mark command is generated and added to the command buffer.\n     * Choose the format of the return value defined in StarPRNT.BlackMarkType or the BlackMarkType enum. 'Valid' | 'Invalid' | 'ValidWithDetection'\n     * Example: {appendBlackMark: BlackMarkType.Valid}\n     */\n    appendBlackMark?: string;\n    /**\n     * Absolute position command is generated and added to the command buffer. (Unit: Dots). Send in conjunction with the data property to append absolute position just to that string\n     * Example1: Append data with Absolute position {appendAbsolutePosition:40, data: \"Text with absolute position\"}\n     * Example2: Append absolute position to subsequent commands: {appendAbsolutePosition:40}\n     */\n    appendAbsolutePosition?: number;\n    /**\n     * Alignment command is generated and added to the command buffer. Send in conjunction with the data property to append alignment position just to that string\n     * Choose the format of the return value defined in StarPRNT.AlignmentPosition or the AlignmentPosition enum. 'Left' | 'Center' | 'Right'.\n     * Example1 Append data with Alignment position: {appendAlignment:AlignmentPosition.Center, data: \"Text with centered position\"}\n     * Example2 Append absolute position to subsequent commands: {appendAlignment:AlignmentPosition.Center}\n     */\n    appendAlignment?: string;\n    /**\n     * Horizontal tab set/clear command is generated and added to the command buffer. (Only works for certain printer models, check the starSDK documentation for details)\n     * Array of horizontal tab positions (Units: ANK character pitch). Specifying empty array deletes all currently set horizontal tab positions.\n     * Example: {appendHorizontalTabPosition:[15, 35]}\n     * Delete positions Example: {appendHorizontalTabPosition:[]}\n     */\n    appendHorizontalTabPosition?: number[];\n    /**\n     * Print command of the logo is generated and added to the command buffer. The logo has to be uploaded to the printer using the Star Print utility.\n     * Send in conjuction with the logoSize property to set the logo size\n     * Example: {appendLogo:1}\n     * Example with LogoSize: {appendLogo:1, logoSize:LogoSize.DoubleWidthDoubleHeight}\n     */\n    appendLogo?: number;\n    /**\n     * Property to be used with the appendLogo command.\n     * Choose the format of the return value defined in StarPRNT.LogoSize or the LogoSize enum. 'Normal' | 'DoubleWidth' | 'DoubleHeight' | 'DoubleWidthDoubleHeight';\n     * Example: {appendLogo:1, logoSize:LogoSize.DoubleWidthDoubleHeight}\n     */\n    logoSize?: string;\n    /**\n     * Print command of the barcode is generated and added to the command buffer.\n     * Additional Properties: BarcodeSymbology, BarcodeWidth, height, hri, absolutePosition, alignment.\n     * Example: {appendBarcode:\"{BStar\", BarcodeSymbology:BarcodeSymbology.Code128, BarcodeWidth:BarcodeWidth.Mode2, height:40, hri:true }\n     * Example with absolutePosition: {appendBarcode:\"{BStar\", BarcodeSymbology:BarcodeSymbology.Code128, BarcodeWidth:BarcodeWidth.Mode2, height:40, hri:true, absolutePosition:40 }\n     * Example with alignment:{appendBarcode:\"{BStar\", BarcodeSymbology:BarcodeSymbology.Code128, BarcodeWidth:BarcodeWidth.Mode2, height:40, hri:true, alignment:alignment:AlignmentPosition.Center }\n     */\n    appendBarcode?: string;\n    /**\n     * Property to be used with the appendBarcode command.\n     * Choose the format of the return value defined in StarPRNT.BarcodeSymbology or the BarcodeSymbology enum.\n     * 'Code128' | 'Code39' | 'Code93' | 'ITF' | 'JAN8' | 'JAN13' | 'NW7' | 'UPCA' | 'UPCE' |\n     * Example: {appendBarcode:'{BStar', BarcodeSymbology:BarcodeSymbology.Code128}\n     */\n    BarcodeSymbology?: string;\n    /**\n     * Property to be used with the appendBarcode command.\n     * Choose the format of the return value defined in StarPRNT.BarcodeWidth or the BarcodeWidth enum.\n     * Mode1 | Mode2 | Mode3 | Mode4 | Mode5 | Mode6 | Mode7 | Mode8 | Mode9\n     * Example: {appendBarcode:'{BStar', BarcodeWidth:BarcodeWidth.Mode2}\n     */\n    BarcodeWidth?: string;\n    /**\n     * Property to be used with the appendBarcode command.\n     * Under-bar characters. true = Valid, false = Invalid\n     * Example: {appendBarcode:'{BStar', hri:true}\n     */\n    hri?: boolean;\n    /**\n     * Property to be used with the appendBarcode command or the appendMultiple command (Units:Dots)\n     * appendBarcode Example: {appendBarcode:'{BStar', height:40}\n     * appendMultiple: {appendMultiple:'text to print', height:40}\n     */\n    height?: number;\n    /**\n     * Property to be used with the appendBitmap command or the appendMultiple command (Units:Dots)\n     * appendBitmap Example: {appendBitmap:uri, width:576}\n     * appendMultiple: {appendMultiple:'text to print', width:40}\n     */\n    width?: number;\n    /**\n     * Property to be used with the appendBitmap command, the appendBarcode command, or the appendQrCode command (Units:Dots)\n     * appendBitmap Example: {appendBitmap:uri, absolutePosition:40}.\n     * appendBarcode Example: {appendBarcode:'{BStar', absolutePosition:40}.\n     * appendQrCode Example: {appendQrCode:'{BStar', absolutePosition:40}.\n     */\n    absolutePosition?: number;\n    /**\n     * Property to be used with the appendBitmap command, the appendBarcode command, or the appendQrCode command (Units:Dots)\n     * Choose the format of the return value defined in StarPRNT.AlignmentPosition or the AlignmentPosition enum. 'Left' | 'Center' | 'Right'.\n     * appendBitmap Example: {appendBitmap:uri, alignment:AlignmentPosition.Center}.\n     * appendBarcode Example: {appendBarcode:'{BStar', alignment:AlignmentPosition.Center}.\n     * appendQrCode Example: {appendQrCode:'{BStar', alignment:AlignmentPosition.Center}.\n     */\n    alignment?: string;\n    /**\n     * Select command of the multiple mode is generated and added to the command buffer.\n     * Additional properties: width:number, height:number\n     * Example: {appendMultiple:\"   $156.95\\n\", width:2, height:2}.\n     */\n    appendMultiple?: string;\n    /**\n     * Enable multiple mode is generated and added to the command buffer.\n     * Additional properties: width:number, height:number\n     * Example: {enableMultiple:true, width:2, height:2}\n     * Disable Example: {enableMultiple:false}\n     */\n    enableMultiple?: boolean;\n    /**\n     * Print command of the QR code is generated and added to the command buffer.\n     * Additional Properties: QrCodeModel, QrCodeLevel, cell, absolutePosition, alignment.\n     * Example: {appendQrCode:\"{BStar\", QrCodeModel:\"No2\", QrCodeLevel:\"L\", cell: 8}.\n     * Example with absolutePosition: {appendQrCode:\"{BStar\", QrCodeModel:\"No2\", QrCodeLevel:\"L\", cell: 8, absolutePosition: 40 }.\n     * Example with alignment: {appendQrCode:\"{BStar\", QrCodeModel:\"No2\", QrCodeLevel:\"L\", cell: 8, alignment:\"Center\" }.\n     */\n    appendQrCode?: string;\n    /**\n     * Property to be used with the appendQrCode command.\n     * Choose the format of the return value defined in StarPRNT.QrCodeModel or the QrCodeModel enum. 'No1' | 'No2' Default 'No2'\n     * Example: {appendQrCode:'{BStar', QrCodeModel:QrCodeModel.No1}\n     */\n    QrCodeModel?: string;\n    /**\n     * Property to be used with the appendQrCode command.\n     * Choose the format of the return value defined in StarPRNT.QrCodeLevel or the QrCodeLevel enum. 'No1' | 'No2'. Default 'H'\n     * Example: {appendQrCode:'{BStar', QrCodeLevel:QrCodeLevel.H}\n     */\n    QrCodeLevel?: string;\n    /**\n     * Property to be used with the appendQrCode command. QRCode Cell size. Default 4.\n     * Example: {appendQrCode:'{BStar', cell:8}\n     */\n    cell?: number;\n    /**\n     * Print command of the bitmap is generated and added to the command buffer. Takes a string image URI\n     * this can be obtained via the camera or photo library or as a static resource saved on the phone memory.\n     * Additional Properties: diffusion, width, bothScale, rotation, absolutePosition, alignment.\n     * Example: {appendBitmap:uri, diffusion: true, width:576, bothScale: true}\n     * Example with absolutePosition: {appendBitmap:uri, diffusion: true, width:576, bothScale: true, absolutePosition: 40 }.\n     * Example with alignment: {appendBitmap:uri, diffusion: true, width:576, bothScale: true, alignment:\"Center\" }.\n     */\n    appendBitmap?: string;\n    /**\n     * Property to be used with the appendBitmap command. Random dither: true = Valid, false = Invalid. Default true.\n     * Example: {appendBitmap:uri, diffusion: false }\n     */\n    diffusion?: boolean;\n    /**\n     * Property to be used with the appendBitmap command. Height is changed according to the conversion rate of the width property.\n     * true = Valid, false = Invalid. Default true.\n     * Example: {appendBitmap:uri, bothScale: true }\n     */\n    bothScale?: boolean;\n    /**\n     * Property to be used with the appendBitmap command.\n     * Choose the format of the return value defined in StarPRNT.BitmapConverterRotation or the BitmapConverterRotation enum.\n     * 'Normal' | 'Left90' | 'Right90' | 'Rotate180'\n     * Example: {appendBitmap:uri, rotation: BitmapConverterRotation.Left90 }\n     */\n    rotation?: string;\n    /**\n     * sends a appendPeripheral command to the printer for channel number: Example: 1 = No1, 2 = No2\n     */\n    openCashDrawer?: number;\n}\n/**\n * Emulation constants\n */\nexport declare enum Emulation {\n    /** mPOP, SM-L200, SM-L300, SM-S210i, SM-S220i, SM-S230i, SM-T300i/T300, SM-T400i */\n    StarPRNT = \"StarPRNT\",\n    /** SM-L200, SM-L300 */\n    StarPRNTL = \"StarPRNTL\",\n    /** FVP10, TSP650II, TSP700II, TSP800II */\n    StarLine = \"StarLine\",\n    /** TSP100 */\n    StarGraphic = \"StarGraphic\",\n    /** BSC10 */\n    EscPos = \"EscPos\",\n    /** SM-S210i, SM-S220i, SM-S230i, SM-T300i/T300, SM-T400i */\n    EscPosMobile = \"EscPosMobile\",\n    /** SP700 */\n    StarDotImpact = \"StarDotImpact\"\n}\n/**\n * Encoding constants\n */\nexport declare enum Encoding {\n    /** English */\n    USASCII = \"US-ASCII\",\n    /** French, German, Portuguese, Spanish */\n    Windows1252 = \"Windows-1252\",\n    /** Japanese */\n    ShiftJIS = \"Shift-JIS\",\n    /** Russian */\n    Windows1251 = \"Windows-1251\",\n    /** Simplified Chinese */\n    GB2312 = \"GB2312\",\n    /** Traditional Chinese */\n    Big5 = \"Big5\",\n    /** UFT8 */\n    UTF8 = \"UTF-8\"\n}\n/**\n * CodePageType constants\n */\nexport declare enum CodePageType {\n    CP737 = \"CP737\",\n    CP772 = \"CP772\",\n    CP774 = \"CP774\",\n    CP851 = \"CP851\",\n    CP852 = \"CP852\",\n    CP855 = \"CP855\",\n    CP857 = \"CP857\",\n    CP858 = \"CP858\",\n    CP860 = \"CP860\",\n    CP861 = \"CP861\",\n    CP862 = \"CP862\",\n    CP863 = \"CP863\",\n    CP864 = \"CP864\",\n    CP865 = \"CP865\",\n    CP869 = \"CP869\",\n    CP874 = \"CP874\",\n    CP928 = \"CP928\",\n    CP932 = \"CP932\",\n    CP999 = \"CP999\",\n    CP1001 = \"CP1001\",\n    CP1250 = \"CP1250\",\n    CP1251 = \"CP1251\",\n    CP1252 = \"CP1252\",\n    CP2001 = \"CP2001\",\n    CP3001 = \"CP3001\",\n    CP3002 = \"CP3002\",\n    CP3011 = \"CP3011\",\n    CP3012 = \"CP3012\",\n    CP3021 = \"CP3021\",\n    CP3041 = \"CP3041\",\n    CP3840 = \"CP3840\",\n    CP3841 = \"CP3841\",\n    CP3843 = \"CP3843\",\n    CP3845 = \"CP3845\",\n    CP3846 = \"CP3846\",\n    CP3847 = \"CP3847\",\n    CP3848 = \"CP3848\",\n    UTF8 = \"UTF8\",\n    Blank = \"Blank\"\n}\n/**\n * InternationalType constants\n */\nexport declare enum InternationalType {\n    UK = \"UK\",\n    USA = \"USA\",\n    France = \"France\",\n    Germany = \"Germany\",\n    Denmark = \"Denmark\",\n    Sweden = \"Sweden\",\n    Italy = \"Italy\",\n    Spain = \"Spain\",\n    Japan = \"Japan\",\n    Norway = \"Norway\",\n    Denmark2 = \"Denmark2\",\n    Spain2 = \"Spain2\",\n    LatinAmerica = \"LatinAmerica\",\n    Korea = \"Korea\",\n    Ireland = \"Ireland\",\n    Legal = \"Legal\"\n}\n/**\n * FontStyleType constants.\n */\nexport declare enum FontStyleType {\n    /** Font-A (12 x 24 dots) / Specify 7 x 9 font (half dots) */\n    A = \"A\",\n    /** Font-B (9 x 24 dots) / Specify 5 x 9 font (2P-1) */\n    B = \"B\"\n}\n/**\n * CutPaperAction constants.\n */\nexport declare enum CutPaperAction {\n    FullCut = \"FullCut\",\n    FullCutWithFeed = \"FullCutWithFeed\",\n    PartialCut = \"PartialCut\",\n    PartialCutWithFeed = \"PartialCutWithFeed\"\n}\n/**\n * BlackMarkType constants.\n */\nexport declare enum BlackMarkType {\n    Valid = \"Valid\",\n    Invalid = \"Invalid\",\n    ValidWithDetection = \"ValidWithDetection\"\n}\n/**\n * LogoSize constants\n */\nexport declare enum LogoSize {\n    Normal = \"Normal\",\n    DoubleWidth = \"DoubleWidth\",\n    DoubleHeight = \"DoubleHeight\",\n    DoubleWidthDoubleHeight = \"DoubleWidthDoubleHeight\"\n}\n/**\n * AlignmentPosition constants\n */\nexport declare enum AlignmentPosition {\n    Left = \"Left\",\n    Center = \"Center\",\n    Right = \"Right\"\n}\n/**\n * BarcodeSymbology constants\n */\nexport declare enum BarcodeSymbology {\n    Code128 = \"Code128\",\n    Code39 = \"Code39\",\n    Code93 = \"Code93\",\n    ITF = \"ITF\",\n    JAN8 = \"JAN8\",\n    JAN13 = \"JAN13\",\n    NW7 = \"NW7\",\n    UPCA = \"UPCA\",\n    UPCE = \"UPCE\"\n}\n/**\n * BarcodeWidth constants\n */\nexport declare enum BarcodeWidth {\n    Mode1 = \"Mode1\",\n    Mode2 = \"Mode2\",\n    Mode3 = \"Mode3\",\n    Mode4 = \"Mode4\",\n    Mode5 = \"Mode5\",\n    Mode6 = \"Mode6\",\n    Mode7 = \"Mode7\",\n    Mode8 = \"Mode8\",\n    Mode9 = \"Mode9\"\n}\n/**\n * QrCodeModel constants\n */\nexport declare enum QrCodeModel {\n    No1 = \"No1\",\n    No2 = \"No2\"\n}\n/**\n * QrCodeLevel constants\n */\nexport declare enum QrCodeLevel {\n    H = \"H\",\n    L = \"L\",\n    M = \"M\",\n    Q = \"Q\"\n}\n/**\n * BitmapConverterRotation constants\n */\nexport declare enum BitmapConverterRotation {\n    Normal = \"Normal\",\n    Left90 = \"Left90\",\n    Right90 = \"Right90\",\n    Rotate180 = \"Rotate180\"\n}\n/**\n * Push a new PrintCommand object to the array for a separate instruction to the printer. Example [{append:\"text\"}, {\"openCashDrawer: 1\"}]\n */\nexport interface CommandsArray extends Array<PrintCommand> {\n}\n/**\n * @name StarPRNT\n * @description\n * * Ionic Native wrappers for the starprnt cordova plugin for Star Micronics Bluetooth/LAN printers\n *\n * @usage\n * ```typescript\n * import { StarPRNT } from '@ionic-native/star-prnt/ngx';\n *\n *\n * constructor(private starprnt: StarPRNT) { }\n *\n * ...\n *\n *\n * this.starprnt.portDiscovery('all')\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\nexport declare class StarPRNT extends IonicNativePlugin {\n    /**\n     * Constant for Emulation\n     */\n    Emulation: {\n        StarPRNT: string;\n        StarPRNTL: string;\n        StarLine: string;\n        StarGraphic: string;\n        EscPos: string;\n        EscPosMobile: string;\n        StarDotImpact: string;\n    };\n    /**\n     * Constant for possible Encoding\n     */\n    Encoding: {\n        USASCII: string;\n        Windows1252: string;\n        ShiftJIS: string;\n        Windows1251: string;\n        GB2312: string;\n        Big5: string;\n        UTF8: string;\n    };\n    /**\n     * CodePageType constants\n     */\n    CodePageType: {\n        CP737: string;\n        CP772: string;\n        CP774: string;\n        CP851: string;\n        CP852: string;\n        CP855: string;\n        CP857: string;\n        CP858: string;\n        CP860: string;\n        CP861: string;\n        CP862: string;\n        CP863: string;\n        CP864: string;\n        CP865: string;\n        CP869: string;\n        CP874: string;\n        CP928: string;\n        CP932: string;\n        CP999: string;\n        CP1001: string;\n        CP1250: string;\n        CP1251: string;\n        CP1252: string;\n        CP2001: string;\n        CP3001: string;\n        CP3002: string;\n        CP3011: string;\n        CP3012: string;\n        CP3021: string;\n        CP3041: string;\n        CP3840: string;\n        CP3841: string;\n        CP3843: string;\n        CP3845: string;\n        CP3846: string;\n        CP3847: string;\n        CP3848: string;\n        UTF8: string;\n        Blank: string;\n    };\n    /**\n     * Constant for possible InternationalType\n     */\n    InternationalType: {\n        UK: string;\n        USA: string;\n        France: string;\n        Germany: string;\n        Denmark: string;\n        Sweden: string;\n        Italy: string;\n        Spain: string;\n        Japan: string;\n        Norway: string;\n        Denmark2: string;\n        Spain2: string;\n        LatinAmerica: string;\n        Korea: string;\n        Ireland: string;\n        Legal: string;\n    };\n    /**\n     * Constant for possible FontStyleType\n     */\n    FontStyleType: {\n        /** Font-A (12 x 24 dots) / Specify 7 x 9 font (half dots) */\n        A: string;\n        /** Font-B (9 x 24 dots) / Specify 5 x 9 font (2P-1) */\n        B: string;\n    };\n    /**\n     * Constant for possible CutPaperAction\n     */\n    CutPaperAction: {\n        FullCut: string;\n        FullCutWithFeed: string;\n        PartialCut: string;\n        PartialCutWithFeed: string;\n    };\n    /**\n     * Constant for possible BlackMarkType\n     */\n    BlackMarkType: {\n        Valid: string;\n        Invalid: string;\n        ValidWithDetection: string;\n    };\n    /**\n     * Constant for possible AlignmentPosition\n     */\n    AlignmentPosition: {\n        Left: string;\n        Center: string;\n        Right: string;\n    };\n    /**\n     * Constant for possible LogoSize\n     */\n    LogoSize: {\n        Normal: string;\n        DoubleWidth: string;\n        DoubleHeight: string;\n        DoubleWidthDoubleHeight: string;\n    };\n    /**\n     * Constant for possible BarcodeSymbology\n     */\n    BarcodeSymbology: {\n        Code128: string;\n        Code39: string;\n        Code93: string;\n        ITF: string;\n        JAN8: string;\n        JAN13: string;\n        NW7: string;\n        UPCA: string;\n        UPCE: string;\n    };\n    /**\n     * Constant for possible BarcodeWidth\n     */\n    BarcodeWidth: {\n        Mode1: string;\n        Mode2: string;\n        Mode3: string;\n        Mode4: string;\n        Mode5: string;\n        Mode6: string;\n        Mode7: string;\n        Mode8: string;\n        Mode9: string;\n    };\n    /**\n     * Constant for possible QrCodeModel\n     */\n    QrCodeModel: {\n        No1: string;\n        No2: string;\n    };\n    /**\n     * Constant for possible QrCodeLevel\n     */\n    QrCodeLevel: {\n        H: string;\n        L: string;\n        M: string;\n        Q: string;\n    };\n    /**\n     * Constant for possible BitmapConverterRotation\n     */\n    BitmapConverterRotation: {\n        Normal: string;\n        Left90: string;\n        Right90: string;\n        Rotate180: string;\n    };\n    /**\n     * Find available printers\n     * @param {string} type  Interface Type: All, LAN, Bluetooth, USB\n     * @return {Promise<Printers>} Returns a promise that resolves with an array of printers\n     */\n    portDiscovery(type: string): Promise<Printers>;\n    /**\n     * Checks the status of the printer\n     * @param {string} port  Printer name i.e BT:StarMicronics\n     * @param {string} emulation  StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @return {Promise<PrinterStatus>} Returns a promise that resolves with the PrinterStatus object\n     */\n    checkStatus(port: string, emulation: string): Promise<PrinterStatus>;\n    /**\n     * Prints plain text\n     * @param {string} port  Printer name i.e BT:StarMicronics. Send null to use a printer connected via StarIOExtManager using the connect() function\n     * @param {string} emulation  StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @param {PrintObj} printObj  text:string, cutReceipt?:boolean, openCashDrawer?:boolean\n     * @return {Promise<any>} Success! if printed correctly or error message string returned by the SDK.\n     */\n    printRawText(port: string, emulation: string, printObj: PrintObj): Promise<any>;\n    /**\n     * Converts the text into a bitmap image and sends it to the printer\n     * @param {string} port  Printer name i.e BT:StarMicronics.  Send null to use a printer connected via StarIOExtManager using the connect() function\n     * @param {string} emulation  StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @param {RasterObj} rasterObj  text:string, cutReceipt?:boolean, openCashDrawer?:boolean, fontSize:number, paperWidth:number\n     * @return {Promise<any>} Success! if printed correctly or error message string returned by the SDK.\n     */\n    printRasterReceipt(port: string, emulation: string, rasterObj: RasterObj): Promise<any>;\n    /**\n     * Gets an image from a string URI and converts it to bitmap to send it to the printer\n     * @param {string} port Printer name i.e BT:StarMicronics.  Send null to use a printer connected via StarIOExtManager using the connect() function\n     * @param {string} emulation  StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @param {ImageObj} imageObj  uri:string, paperWidth?:number, cutReceipt?:boolean, openCashDrawer?:boolean\n     * @return {Promise<any>} Success! if printed correctly or error message string returned by the SDK.\n     */\n    printImage(port: string, emulation: string, imageObj: ImageObj): Promise<any>;\n    /**\n     * sends an appendPeripheral command to the printer for channels No1 and No2\n     * @param {string} port  Printer name i.e BT:StarMicronics.  Send null to use a printer connected via StarIOExtManager using the connect() function\n     * @param {string} emulation  StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @return {Promise<any>} Success! if opened or error message string returned by the SDK.\n     */\n    openCashDrawer(port: string, emulation: string): Promise<any>;\n    /**\n     * Sends an Array of commands to the command buffer using the Android ICommandBuilderInterface or iOS ISCBBuilderInterface\n     * @param {string} port  Printer name i.e BT:StarMicronics.  Send null to use a printer connected via StarIOExtManager using the connect() function\n     * @param {string} emulation  StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @param {CommandsArray} commandsArray  each command in the array should be an instance of the PrintCommand object. Example [{append:\"text\"}, {\"openCashDrawer: 1\"}]\n     * @return {Promise<any>} Success! if printed correctly or error message string returned by the SDK.\n     */\n    print(port: string, emulation: string, commandsArray: CommandsArray): Promise<any>;\n    /**\n     * Allows you to connect to the printer, keep the connection alive and receive status updates through an observable\n     * @param {string} port  printer name i.e BT:StarMicronics.\n     * @param {string} emulation  StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @return {Observable<any>} Success! if connected or error message string returned by the SDK.\n     */\n    connect(port: string, emulation: string, hasBarcodeReader: boolean): Observable<any>;\n    /**\n     * Returns an observable with the device status events. Only fires when a printer is connnected through the connect() function\n     * @return {Observable<any>} dataType: printerOnline, printerOffline, printerImpossible, printerPaperEmpty, printerPaperNearEmpty, printerPaperReady, printerCoverOpen, printerCoverClose, cashDrawerOpen, cashDrawerClose\n     */\n    getStatus(): Observable<any>;\n    /**\n     * Allows to disconnect (close the connection to the peripherals), this is useful to avoid keeping alive a connection when not in the app to save device battery\n     * (energy consumption). You should call this function when the app is paused or closed.\n     * @return {Promise<any>} Success! if connected or error message string returned by the SDK.\n     */\n    disconnect(): Promise<any>;\n}\n"]}