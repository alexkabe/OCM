{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\n/**\n * @name Network Interface\n * @description\n * Network interface information plugin for Cordova/PhoneGap that supports Android, Blackberry 10, Browser, iOS, and Windows Phone 8.\n *\n * @usage\n * ```typescript\n * import { NetworkInterface } from '@ionic-native/network-interface/ngx';\n *\n * constructor( private networkInterface: NetworkInterface ) {\n *\n *   this.networkInterface.getWiFiIPAddress()\n *     .then(address => console.info(`IP: ${address.ip}, Subnet: ${address.subnet}`))\n *     .catch(error => console.error(`Unable to get IP: ${error}`));\n *\n *   this.networkInterface.getCarrierIPAddress()\n *     .then(address => console.info(`IP: ${address.ip}, Subnet: ${address.subnet}`))\n *     .catch(error => console.error(`Unable to get IP: ${error}`));\n *\n *   const url = 'www.github.com';\n *   this.networkInterface.getHttpProxyInformation(url)\n *     .then(proxy => console.info(`Type: ${proxy.type}, Host: ${proxy.host}, Port: ${proxy.port}`))\n *     .catch(error => console.error(`Unable to get proxy info: ${error}`));\n * }\n * ```\n */\nexport declare class NetworkInterface extends IonicNativePlugin {\n    /**\n     * Gets the WiFi IP address\n     * @return {Promise<any>} Returns a Promise that resolves with the IP address information.\n     */\n    getWiFiIPAddress(): Promise<any>;\n    /**\n     * Gets the wireless carrier IP address\n     * @return {Promise<any>} Returns a Promise that resolves with the IP address information.\n     */\n    getCarrierIPAddress(): Promise<any>;\n    /**\n     * Gets the relevant proxies for the passed URL in order of application\n     * @param {url} message  The message to display.\n     * @return {Promise<any>} Returns a Promise that resolves with the proxy information.\n     */\n    getHttpProxyInformation(url: string): Promise<any>;\n}\n"]}