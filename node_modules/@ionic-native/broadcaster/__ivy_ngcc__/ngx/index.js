import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var Broadcaster = /** @class */ (function (_super) {
    __extends(Broadcaster, _super);
    function Broadcaster() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Broadcaster.prototype.addEventListener = function (eventName, isGlobal) {
        if (isGlobal === void 0) { isGlobal = false; }
        return cordova(this, "addEventListener", { "observable": true, "clearFunction": "removeEventListener", "clearWithArgs": true }, arguments);
    };
    Broadcaster.prototype.fireNativeEvent = function (eventName, isGlobalOrEventData, data) { return cordova(this, "fireNativeEvent", {}, arguments); };
    Broadcaster.pluginName = "Broadcaster";
    Broadcaster.plugin = "cordova-plugin-broadcaster";
    Broadcaster.pluginRef = "broadcaster";
    Broadcaster.repo = "https://github.com/bsorrentino/cordova-broadcaster";
    Broadcaster.platforms = ["Android", "iOS", "Browser"];
Broadcaster.ɵfac = function Broadcaster_Factory(t) { return ɵBroadcaster_BaseFactory(t || Broadcaster); };
Broadcaster.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Broadcaster, factory: function (t) { return Broadcaster.ɵfac(t); } });
var ɵBroadcaster_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(Broadcaster);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Broadcaster, [{
        type: Injectable
    }], null, null); })();
    return Broadcaster;
}(IonicNativePlugin));
export { Broadcaster };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvYnJvYWRjYXN0ZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFDbEM7QUFJQSxJQXdDaUMsK0JBQWlCO0FBQUM7QUFFOUI7QUFDUztBQUN6QixJQVFILHNDQUFnQixhQUFDLFNBQWlCLEVBQUUsUUFBZ0I7QUFBSSxRQUFwQix5QkFBQSxFQUFBLGdCQUFnQjtBQUFJO0FBTzlCO0FBQU8sSUFRakMscUNBQWUsYUFBQyxTQUFpQixFQUFFLG1CQUF3QyxFQUFFLElBQWdCO0FBSXBFO0FBQTRDO0FBQXVEO0FBQTJDO0FBQTZFO0lBL0J6TyxXQUFXLHdCQUR2QixVQUFVLEVBQUUsUUFDQSxXQUFXOzs7OzswQkFBRTtBQUFDLHNCQS9DM0I7QUFBRSxFQStDK0IsaUJBQWlCO0FBQ2pELFNBRFksV0FBVztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogU3BlY2lmaWMgZGF0YSBmb3IgQW5kcm9pZCBpbXBsZW1lbnRhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFuZHJvaWREYXRhIHtcbiAgZXh0cmFzOiBvYmplY3Q7XG4gIGZsYWdzOiBudW1iZXI7XG4gIGNhdGVnb3J5OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUG9zc2libHkgRXZlbnQgRGF0YSB0eXBlc1xuICovXG5leHBvcnQgdHlwZSBFdmVudERhdGEgPSBvYmplY3QgfCBBbmRyb2lkRGF0YSB8IG51bGw7XG5cbi8qKlxuICogQG5hbWUgQnJvYWRjYXN0ZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gYWRkcyBleGNoYW5naW5nIGV2ZW50cyBiZXR3ZWVuIG5hdGl2ZSBjb2RlIGFuZCB5b3VyIGFwcC5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJyb2FkY2FzdGVyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9icm9hZGNhc3Rlci9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYnJvYWRjYXN0ZXI6IEJyb2FkY2FzdGVyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiAvLyBMaXN0ZW4gdG8gZXZlbnRzIGZyb20gTmF0aXZlXG4gKiB0aGlzLmJyb2FkY2FzdGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2V2ZW50TmFtZScpLnN1YnNjcmliZSgoZXZlbnQpID0+IGNvbnNvbGUubG9nKGV2ZW50KSk7XG4gKlxuICogLy8gU2VuZCBldmVudCB0byBOYXRpdmVcbiAqIHRoaXMuYnJvYWRjYXN0ZXIuZmlyZU5hdGl2ZUV2ZW50KCdldmVudE5hbWUnLCB7fSkudGhlbigoKSA9PiBjb25zb2xlLmxvZygnc3VjY2VzcycpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdCcm9hZGNhc3RlcicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWJyb2FkY2FzdGVyJyxcbiAgcGx1Z2luUmVmOiAnYnJvYWRjYXN0ZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2Jzb3JyZW50aW5vL2NvcmRvdmEtYnJvYWRjYXN0ZXInLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnQnJvd3NlciddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCcm9hZGNhc3RlciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gbGlzdGVuIHRvIGFuIGV2ZW50IHNlbnQgZnJvbSB0aGUgbmF0aXZlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzR2xvYmFsIFZhbGlkIG9ubHkgZm9yIEFuZHJvaWQuIEl0IGFsbG93cyB0byBsaXN0ZW4gZm9yIGdsb2JhbCBtZXNzYWdlcyhpLmUuIGludGVudHMpXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRvIHdhdGNoIHdoZW4gYW4gZXZlbnQgaXMgcmVjZWl2ZWRcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICdyZW1vdmVFdmVudExpc3RlbmVyJyxcbiAgICBjbGVhcldpdGhBcmdzOiB0cnVlLFxuICB9KVxuICBhZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZTogc3RyaW5nLCBpc0dsb2JhbCA9IGZhbHNlKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBzZW5kcyBkYXRhIHRvIHRoZSBuYXRpdmUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNHbG9iYWxPckV2ZW50RGF0YSBtZWFucyB0aGF0IG1lc3NhZ2UgaXMgZ2xvYmFsICh2YWxpZCBvbmx5IG9uIEFuZHJvaWQpXG4gICAqIEBwYXJhbSB7QW5kcm9pZERhdGF9IGlzR2xvYmFsT3JFdmVudERhdGEgYWxsb3dzIHRvIHNwZWNpZnkgJ2ZsYWdzYCBhbmQgJ2NhdGVnb3J5JyAodmFsaWQgb25seSBvbiBBbmRyb2lkKVxuICAgKiBAcGFyYW0ge29iamVjdH0gaXNHbG9iYWxPckV2ZW50RGF0YSBhbGxvd3MgdG8gc3BlY2lmeSBhIGdlbmVyaWMgb2JqZWN0IGNvbnRhaW5pbmcgY3VzdG9tIGV2ZW50IGRhdGEgKGFsbCBwbGF0Zm9ybSlcbiAgICogQHBhcmFtIHtBbmRyb2lkRGF0YX0gW2RhdGFdIGlmIGlzR2xvYmFsIGlzIHNldCwgYWxsb3dzIHRvIHNwZWNpZnkgJ2ZsYWdzYCBhbmQgJ2NhdGVnb3J5JyBpZiBpc0dsb2JhbCBpcyBzZXQgKHZhbGlkIG9ubHkgb24gQW5kcm9pZClcbiAgICogQHBhcmFtIHtvYmplY3R9IFtkYXRhXSBpZiBpc0dsb2JhbCBpcyBzZXQsIGFsbG93cyB0byBzcGVjaWZ5IGEgZ2VuZXJpYyBvYmplY3QgY29udGFpbmluZyBjdXN0b20gZXZlbnQgZGF0YSAoYWxsIHBsYXRmb3JtKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbiBldmVudCBpcyBzdWNjZXNzZnVsbHkgZmlyZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZmlyZU5hdGl2ZUV2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBpc0dsb2JhbE9yRXZlbnREYXRhOiBib29sZWFuIHwgRXZlbnREYXRhLCBkYXRhPzogRXZlbnREYXRhKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==