import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Broadcaster = /** @class */ (function (_super) {
    __extends(Broadcaster, _super);
    function Broadcaster() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Broadcaster.prototype.addEventListener = function (eventName, isGlobal) {
        if (isGlobal === void 0) { isGlobal = false; }
        return cordova(this, "addEventListener", { "observable": true, "clearFunction": "removeEventListener", "clearWithArgs": true }, arguments);
    };
    Broadcaster.prototype.fireNativeEvent = function (eventName, isGlobalOrEventData, data) { return cordova(this, "fireNativeEvent", {}, arguments); };
    Broadcaster.pluginName = "Broadcaster";
    Broadcaster.plugin = "cordova-plugin-broadcaster";
    Broadcaster.pluginRef = "broadcaster";
    Broadcaster.repo = "https://github.com/bsorrentino/cordova-broadcaster";
    Broadcaster.platforms = ["Android", "iOS", "Browser"];
    Broadcaster = __decorate([
        Injectable()
    ], Broadcaster);
    return Broadcaster;
}(IonicNativePlugin));
export { Broadcaster };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Jyb2FkY2FzdGVyL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBNkNELCtCQUFpQjs7OztJQVloRCxzQ0FBZ0IsYUFBQyxTQUFpQixFQUFFLFFBQWdCO1FBQWhCLHlCQUFBLEVBQUEsZ0JBQWdCOzs7SUFlcEQscUNBQWUsYUFBQyxTQUFpQixFQUFFLG1CQUF3QyxFQUFFLElBQWdCOzs7Ozs7SUEzQmxGLFdBQVc7UUFEdkIsVUFBVSxFQUFFO09BQ0EsV0FBVztzQkEvQ3hCO0VBK0NpQyxpQkFBaUI7U0FBckMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIFNwZWNpZmljIGRhdGEgZm9yIEFuZHJvaWQgaW1wbGVtZW50YXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBbmRyb2lkRGF0YSB7XG4gIGV4dHJhczogb2JqZWN0O1xuICBmbGFnczogbnVtYmVyO1xuICBjYXRlZ29yeTogc3RyaW5nO1xufVxuXG4vKipcbiAqIFBvc3NpYmx5IEV2ZW50IERhdGEgdHlwZXNcbiAqL1xuZXhwb3J0IHR5cGUgRXZlbnREYXRhID0gb2JqZWN0IHwgQW5kcm9pZERhdGEgfCBudWxsO1xuXG4vKipcbiAqIEBuYW1lIEJyb2FkY2FzdGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGFkZHMgZXhjaGFuZ2luZyBldmVudHMgYmV0d2VlbiBuYXRpdmUgY29kZSBhbmQgeW91ciBhcHAuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCcm9hZGNhc3RlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYnJvYWRjYXN0ZXIvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGJyb2FkY2FzdGVyOiBCcm9hZGNhc3RlcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogLy8gTGlzdGVuIHRvIGV2ZW50cyBmcm9tIE5hdGl2ZVxuICogdGhpcy5icm9hZGNhc3Rlci5hZGRFdmVudExpc3RlbmVyKCdldmVudE5hbWUnKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiBjb25zb2xlLmxvZyhldmVudCkpO1xuICpcbiAqIC8vIFNlbmQgZXZlbnQgdG8gTmF0aXZlXG4gKiB0aGlzLmJyb2FkY2FzdGVyLmZpcmVOYXRpdmVFdmVudCgnZXZlbnROYW1lJywge30pLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ3N1Y2Nlc3MnKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQnJvYWRjYXN0ZXInLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1icm9hZGNhc3RlcicsXG4gIHBsdWdpblJlZjogJ2Jyb2FkY2FzdGVyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ic29ycmVudGluby9jb3Jkb3ZhLWJyb2FkY2FzdGVyJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ0Jyb3dzZXInXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQnJvYWRjYXN0ZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGxpc3RlbiB0byBhbiBldmVudCBzZW50IGZyb20gdGhlIG5hdGl2ZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0dsb2JhbCBWYWxpZCBvbmx5IGZvciBBbmRyb2lkLiBJdCBhbGxvd3MgdG8gbGlzdGVuIGZvciBnbG9iYWwgbWVzc2FnZXMoaS5lLiBpbnRlbnRzKVxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0byB3YXRjaCB3aGVuIGFuIGV2ZW50IGlzIHJlY2VpdmVkXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBjbGVhckZ1bmN0aW9uOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcicsXG4gICAgY2xlYXJXaXRoQXJnczogdHJ1ZSxcbiAgfSlcbiAgYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWU6IHN0cmluZywgaXNHbG9iYWwgPSBmYWxzZSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gc2VuZHMgZGF0YSB0byB0aGUgbmF0aXZlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzR2xvYmFsT3JFdmVudERhdGEgbWVhbnMgdGhhdCBtZXNzYWdlIGlzIGdsb2JhbCAodmFsaWQgb25seSBvbiBBbmRyb2lkKVxuICAgKiBAcGFyYW0ge0FuZHJvaWREYXRhfSBpc0dsb2JhbE9yRXZlbnREYXRhIGFsbG93cyB0byBzcGVjaWZ5ICdmbGFnc2AgYW5kICdjYXRlZ29yeScgKHZhbGlkIG9ubHkgb24gQW5kcm9pZClcbiAgICogQHBhcmFtIHtvYmplY3R9IGlzR2xvYmFsT3JFdmVudERhdGEgYWxsb3dzIHRvIHNwZWNpZnkgYSBnZW5lcmljIG9iamVjdCBjb250YWluaW5nIGN1c3RvbSBldmVudCBkYXRhIChhbGwgcGxhdGZvcm0pXG4gICAqIEBwYXJhbSB7QW5kcm9pZERhdGF9IFtkYXRhXSBpZiBpc0dsb2JhbCBpcyBzZXQsIGFsbG93cyB0byBzcGVjaWZ5ICdmbGFnc2AgYW5kICdjYXRlZ29yeScgaWYgaXNHbG9iYWwgaXMgc2V0ICh2YWxpZCBvbmx5IG9uIEFuZHJvaWQpXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbZGF0YV0gaWYgaXNHbG9iYWwgaXMgc2V0LCBhbGxvd3MgdG8gc3BlY2lmeSBhIGdlbmVyaWMgb2JqZWN0IGNvbnRhaW5pbmcgY3VzdG9tIGV2ZW50IGRhdGEgKGFsbCBwbGF0Zm9ybSlcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYW4gZXZlbnQgaXMgc3VjY2Vzc2Z1bGx5IGZpcmVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGZpcmVOYXRpdmVFdmVudChldmVudE5hbWU6IHN0cmluZywgaXNHbG9iYWxPckV2ZW50RGF0YTogYm9vbGVhbiB8IEV2ZW50RGF0YSwgZGF0YT86IEV2ZW50RGF0YSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=