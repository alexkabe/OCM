{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n/**\n * Specific data for Android implementation\n */\nexport interface AndroidData {\n    extras: object;\n    flags: number;\n    category: string;\n}\n/**\n * Possibly Event Data types\n */\nexport declare type EventData = object | AndroidData | null;\n/**\n * @name Broadcaster\n * @description\n * This plugin adds exchanging events between native code and your app.\n *\n * @usage\n * ```typescript\n * import { Broadcaster } from '@ionic-native/broadcaster/ngx';\n *\n * constructor(private broadcaster: Broadcaster) { }\n *\n * ...\n *\n * // Listen to events from Native\n * this.broadcaster.addEventListener('eventName').subscribe((event) => console.log(event));\n *\n * // Send event to Native\n * this.broadcaster.fireNativeEvent('eventName', {}).then(() => console.log('success'));\n *\n * ```\n */\nexport declare class Broadcaster extends IonicNativePlugin {\n    /**\n     * This function listen to an event sent from the native code\n     * @param {string} eventName\n     * @param {boolean} isGlobal Valid only for Android. It allows to listen for global messages(i.e. intents)\n     * @return {Observable<any>} Returns an observable to watch when an event is received\n     */\n    addEventListener(eventName: string, isGlobal?: boolean): Observable<any>;\n    /**\n     * This function sends data to the native code\n     * @param {string} eventName\n     * @param {boolean} isGlobalOrEventData means that message is global (valid only on Android)\n     * @param {AndroidData} isGlobalOrEventData allows to specify 'flags` and 'category' (valid only on Android)\n     * @param {object} isGlobalOrEventData allows to specify a generic object containing custom event data (all platform)\n     * @param {AndroidData} [data] if isGlobal is set, allows to specify 'flags` and 'category' if isGlobal is set (valid only on Android)\n     * @param {object} [data] if isGlobal is set, allows to specify a generic object containing custom event data (all platform)\n     * @return {Promise<any>} Returns a promise that resolves when an event is successfully fired\n     */\n    fireNativeEvent(eventName: string, isGlobalOrEventData: boolean | EventData, data?: EventData): Promise<any>;\n}\n"]}